@inherits Containerbase

@if (this.applicationprovider?._contextcontainer != null && this.applicationprovider?._contextcontainercolumns != null)
{

    <div class="@this.applicationprovider._contextcontainer.Containertype">

        <div class="row align-items-center">

            @foreach (var column in this.applicationprovider._contextcontainercolumns)
            {

                <div class="position-relative @column.Columnwidth" style="width: 100%; min-height: 140px; border: 2px dotted black">

                    @foreach (var module in column.Modules)
                    {

                        var dictitem = new Dictionary<string, object>();
                        dictitem.Add("Moduleid", module.Id);

                        Type componenttype = Type.GetType(module.Assemblytype);

                        <div class="position-relative">

                            <DynamicComponent Type="@componenttype" Parameters="@dictitem"></DynamicComponent>

                            <AuthorizeView Roles="Host">
                                <Authorized>
                                    <button @onclick="async() => await Deletemodule(module.Id)" @onclick:stopPropagation=true type="button" class="btn btn-sm btn-primary px-2 py-2 rounded-0" style="position: absolute; top: 4px; right: 4px;">
                                        <small class="py-2">Delete module item</small>
                                    </button>
                                </Authorized>
                            </AuthorizeView>

                        </div>

                    }

                    <div id="@column.Id" class="packagedropzone packagedropzone-@(column.Id.ToString())" />

                </div>

            }

        </div>

    </div>

}


@code {




}
