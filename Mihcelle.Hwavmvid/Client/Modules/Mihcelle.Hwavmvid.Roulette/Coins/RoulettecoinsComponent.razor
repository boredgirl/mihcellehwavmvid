@namespace Mihcelle.Hwavmvid.Modules.Roulette.Coins
@inherits ComponentBase
@implements IAsyncDisposable

@using System
@using System.Linq
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Mihcelle.Hwavmvid.Modules.Roulette.Shared.Items
@using Mihcelle.Hwavmvid.Modules.Roulette.Shared
@using Mihcelle.Hwavmvid.Modules.Roulette.Shared.Constants

<div class="position-relative draggablerouletteitem">

    <div id="@(string.Concat(RouletteConstants.draggableitemprefix, Item.Id))" draggable="true">
                    
        <button type="button" class="btn btn-sm btn-warning" id="@Item.Id">
            <strong>@(Item.CurrencyAbbr)@(Item.Value)</strong>
        </button>

    </div>

</div>

@code {

    [Inject] public RoulettecoinsService RoulettecoinsService { get; set; }

    [Parameter] public RouletteCoin Item { get; set; }

    public List<RouletteCoin> Coins { get; set; } = new List<RouletteCoin>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public async ValueTask DisposeAsync()
    {

        if (this.RoulettecoinsService.draggablejsmaps.Any())
        {
            var draggablemap = this.RoulettecoinsService.draggablejsmaps.FirstOrDefault(item => item.Id == this.Item.Id);
            if (draggablemap != null)
            {
                await draggablemap.JSObjectReference.DisposeAsync();
            }
            this.RoulettecoinsService.draggablejsmaps.Remove(draggablemap);
        }

        if (this.RoulettecoinsService.droppablejsmaps.Any() && !this.RoulettecoinsService.draggablejsmaps.Any())
        {
            foreach (var item in this.RoulettecoinsService.droppablejsmaps)
            {
                await item.JSObjectReference.DisposeAsync();
            }
            this.RoulettecoinsService.droppablejsmaps.Clear();
        }

        if (!this.RoulettecoinsService.draggablejsmaps.Any() && !this.RoulettecoinsService.droppablejsmaps.Any() && this.RoulettecoinsService.javascriptfile != null)
        {
            await this.RoulettecoinsService.javascriptfile.DisposeAsync();

            if (this.RoulettecoinsService.javascriptfile != null)
                this.RoulettecoinsService.javascriptfile = null;
        }
    }    
}