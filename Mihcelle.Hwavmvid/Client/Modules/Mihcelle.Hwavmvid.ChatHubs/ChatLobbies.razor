@namespace Mihcelle.Hwavmvid.Modules.ChatHubs
@inherits ComponentBase
@implements IDisposable

@using Mihcelle.Hwavmvid.Pager
@using Mihcelle.Hwavmvid.Modules.ChatHubs.Services
@using Oqtane.ChatHubs.Models
@using Oqtane.ChatHubs.Enums
@using Oqtane.ChatHubs.Constants
@using System.Linq
@using Mihcelle.Hwavmvid.Client.Modules

@inject NavigationManager NavigationManager
@inject ChatHubService ChatHubService
@inject Pagerservice<ChatHubRoom> PagerServiceChatHubRoom

@if (this.ChatHubService != null && !string.IsNullOrEmpty(this.ChatHubService.ModuleId))
{

    <div class="bg-white p-md-2 mt-0 mt-sm-2 border border-primary">

        @{
            var getItemsApiUrl = string.Concat("api/chathub/GetRooms");
        }

        <PagerComponent ApiQueryId="@this.ChatHubService.ModuleId" ElementId="WasmHwavmvid.PagerLobbyRoomItems" GetItemsApiUrl="@getItemsApiUrl" ContextPageItems="@ChatHubService.Lobbies" ItemsPerPage="@ChatHubConstants.FrontPageItems" Class="py-sm-3" Scrolling="@true">

            <PagerItem>

                <div class="d-flex flex-wrap flex-sm-nowrap align-items-center w-100 py-2" style="@(context.Status == ChatHubRoomStatus.Archived.ToString() ? "border-top: 1px solid red;" : "border-top: 1px solid #bb99ff;")">

                    <div class="px-1">

                        @if (!string.IsNullOrEmpty(context.SnapshotUrl) && context.Broadcasting)
                        {
                            <img src="@string.Format("{0}/{1}/{2}", NavigationManager.BaseUri, ChatHubConstants.UploadImagesPath, context.SnapshotUrl)" class="img-fuid" style="background-color: @(context.Status == ChatHubRoomStatus.Archived.ToString() ? "#fff1f1;" : "#f1f1ff;"); max-width: 100px;" />
                        }
                        else
                        {
                            <img src="@string.Format("{0}/{1}/{2}", NavigationManager.BaseUri, ChatHubConstants.RoomImagesPath, context.ImageUrl)" class="@(string.Concat(string.IsNullOrEmpty(context.ImageUrl) ? "d-none" : "img-fuid", " ", context.Status == ChatHubRoomStatus.Archived.ToString() ? "bg-danger" : "bg-info"))" style="max-width: 100px;" />
                            <img src="@string.Format("{0}/{1}/chat-room-image.png", NavigationManager.BaseUri, ChatHubConstants.ModulePath)" class="@(string.Concat(string.IsNullOrEmpty(context.ImageUrl) ? "img-fluid" : "d-none", " ", context.Status == ChatHubRoomStatus.Archived.ToString() ? "bg-danger" : "bg-info"))" style="max-width: 100px;" />
                        }

                    </div>

                    <div class="px-1 py-2">
                        <a href="#">
                            <h5>
                                @context.Title
                            </h5>
                        </a>
                        <div>
                            <div>@context.Content</div>
                            <div>
                                <span class="badge bg-primary">@context.Type</span>
                                <span class="badge bg-primary">@context.UsersLength Users Online</span>
                                <span class="badge bg-primary">@context.Status</span>
                                <span class="badge bg-primary">@context.ViewersLength Viewers</span>
                            </div>
                            <div>
                                <small class="text-muted">

                                    @if (context.Broadcasting)
                                    {
                                        <span class="oi oi-media-record text-danger "></span><span> Broadcasting | </span>
                                    }
                                    @context.Creator.DisplayName <span class="oi oi-check"></span>

                                </small>
                                <br />
                                <small class="text-muted">Posted on @context.CreatedOn.ToShortDateString() <span class="oi oi-clock"></span></small>
                            </div>
                        </div>
                    </div>

                    <div class="ms-none ms-sm-auto px-1">

                        <!--
                        <Microsoft.AspNetCore.Components.Authorization.AuthorizeView Roles="@RoleNames.Admin">
                        <Authorized Context="_context">
                        <button type="button" class="btn btn-sm btn-link bg-white border border-light d-none d-md-block" @onclick="@(async() => await ChatHubService.CreateExampleUserData(context.Id))">Create user data</button>
                        </Authorized>
                        </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                        -->

                        <button type="button" class="btn btn-sm btn-dark rounded-0" @onclick="@(async () => await ChatHubService.EnterRoom_Clicked(context.Id, context.ModuleId))">Enter</button>
                        @if (ChatHubService.ConnectedUser?.Id == context.CreatorId || ChatHubService.ConnectedUser?.UserName == "host")
                        {
                            <button type="button" class="btn btn-sm btn-dark rounded-0" @onclick="@(() => EditRoomModalRef.OpenEditRoomModal(context.Id))">Edit</button>

                                /*
                                <ActionDialog Header="@(context.Status == ChatHubRoomStatus.Enabled.ToString() ? ChatHubRoomStatus.Archived.ToString() : ChatHubRoomStatus.Enabled.ToString())" Message="@("Are you sure you want to archive this room?")" Action="@(context.Status == ChatHubRoomStatus.Enabled.ToString() ? ChatHubRoomStatus.Archived.ToString() : ChatHubRoomStatus.Enabled.ToString())" Security="SecurityAccessLevel.Edit" Class="btn btn-sm btn-dark rounded-0" OnClick="@(async () => await ChatHubService.EnableArchiveRoom_Clicked(context))" />
                                <ActionDialog Header="Delete" Message="@("Are your sure you want to delete this room?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-sm btn-dark rounded-0" OnClick="@(async () => await ChatHubService.DeleteRoom_Clicked(context.Id))" />
                                */
                        }
                    </div>

                </div>

            </PagerItem>

        </PagerComponent>

    </div>
}


@code {


    [Parameter] public EditRoomModal EditRoomModalRef { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.PagerServiceChatHubRoom.OnRetrievedItems += RetrievedItems;
        this.PagerServiceChatHubRoom.OnError += Error;
        await base.OnInitializedAsync();
    }

    public void RetrievedItems(List<ChatHubRoom> obj, string apiQueryId)
    {
        if (apiQueryId == this.ChatHubService.ModuleId)
        {
            this.ChatHubService.Lobbies.AddRange(obj);
            this.ChatHubService.RunUpdateUI();
        }
    }

    public void Error(Exception exception, string apiQueryId)
    {
        if (this.ChatHubService.ModuleId == apiQueryId)
        {
            this.ChatHubService.HandleException(exception);
        }
    }

    public void Dispose()
    {
        this.PagerServiceChatHubRoom.OnRetrievedItems -= RetrievedItems;
        this.PagerServiceChatHubRoom.OnError -= Error;
    }

}
