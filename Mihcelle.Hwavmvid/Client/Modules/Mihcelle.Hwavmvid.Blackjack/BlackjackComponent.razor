@namespace Mihcelle.Hwavmvid.Modules.Blackjack
@inherits BlackjackComponentBase

@using System
@using System.Linq
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

<style type="text/css">

    .blackjack-background {

        background-image: url('/blackjack/lasvegas.png');
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        min-height: 600px;
    }

</style>

@if (ContextCardDeck != null)
{
    <div class="p-md-2 mt-2 text-center bg-dark border border-primary blackjack-background">

        <div class="row">

            <div class="col-sm-3 justify-content-center">

                @if (GameStatus == BlackjackGameStatus.ClientWon)
                {
                    <div class="alert alert-success">
                        Won that game!!
                    </div>
                }

                @if (GameStatus == BlackjackGameStatus.DealerWon)
                {
                    <div class="alert alert-danger">
                        Lost that game!!
                    </div>
                }

            </div>

            <div class="col-sm-2 offset-sm-0 justify-content-end">
                <div class="blackjack-card-deck p-1 p-sm-2">

                    <img src="/blackjack/@(string.Concat(ContextCardDeck.ImageUrl, ContextCardDeck.ImageUrlExtension))" height="250" />

                    <div class="my-2 my-sm-3">
                        <div class="bg-dark text-light p-1">
                            <strong class="lead">Dealer: @DealerCards.Sum(item => item.Value)</strong>
                        </div>

                        <div class="bg-dark text-light p-1">
                            <strong class="lead">Client: @ClientCards.Sum(item => item.Value)</strong>
                        </div>
                    </div>

                </div>
            </div>

            <div class="col-sm-7 justify-content-start">

                <div class="blackjack-dealer-cards d-flex flex-wrap d-flex justify-content-start">

                    @if (GameStatus == BlackjackGameStatus.DealerGameplay ||
                       GameStatus == BlackjackGameStatus.ClientWon ||
                       GameStatus == BlackjackGameStatus.DealerWon)
                    {
                        foreach (var card in DealerCards)
                        {
                            <div class="blackjack-grid-item p-1 p-sm-2">
                                <BlackjackCardTemplate Card="@card"></BlackjackCardTemplate>
                            </div>
                        }
                    }

                    @if (GameStatus == BlackjackGameStatus.ClientGameplay ||
                       GameStatus == BlackjackGameStatus.InitCardDeal)
                    {
                        var firstdealercard = DealerCards.FirstOrDefault();

                        <div class="blackjack-grid-item p-1 p-sm-2">
                            <BlackjackCardTemplate Card="@firstdealercard"></BlackjackCardTemplate>
                        </div>

                        <div class="blackjack-grid-item p-1 p-sm-2">
                            <BlackjackCardTemplate Card="@GetPlaceholderCard()"></BlackjackCardTemplate>
                        </div>
                    }

                    @if (GameStatus == BlackjackGameStatus.NewGame)
                    {
                        <div class="blackjack-grid-item p-1 p-sm-2">
                            <BlackjackCardTemplate Card="@GetPlaceholderCard()"></BlackjackCardTemplate>
                        </div>

                        <div class="blackjack-grid-item p-1 p-sm-2">
                            <BlackjackCardTemplate Card="@GetPlaceholderCard()"></BlackjackCardTemplate>
                        </div>
                    }

                </div>

                <div class="blackjack-client-cards d-flex flex-wrap d-flex justify-content-start">

                    @if (GameStatus == BlackjackGameStatus.InitCardDeal ||
                       GameStatus == BlackjackGameStatus.ClientGameplay ||
                       GameStatus == BlackjackGameStatus.DealerGameplay ||
                       GameStatus == BlackjackGameStatus.ClientWon ||
                       GameStatus == BlackjackGameStatus.DealerWon)
                    {
                        @foreach (var card in ClientCards)
                        {
                            <div class="blackjack-grid-item p-1 p-sm-2">
                                <BlackjackCardTemplate Card="@card"></BlackjackCardTemplate>
                            </div>
                        }
                    }

                    @if (GameStatus == BlackjackGameStatus.NewGame)
                    {
                        <div class="blackjack-grid-item p-1 p-sm-2">
                            <BlackjackCardTemplate Card="@GetPlaceholderCard()"></BlackjackCardTemplate>
                        </div>

                        <div class="blackjack-grid-item p-1 p-sm-2">
                            <BlackjackCardTemplate Card="@GetPlaceholderCard()"></BlackjackCardTemplate>
                        </div>
                    }

                </div>

            </div>

        </div>

        <div class="position-relative text-center p-3 p-sm-4">

            <button @onclick="@(async () => await Play_Clicked())" type="button" class="btn btn-sm btn-primary p-2 p-sm-5 lead" style="font-size: 2.4rem;"  disabled="@(GameStatus != BlackjackGameStatus.NewGame ? true : false)">
                Play new game
            </button>

            <button @onclick="@(async () => await Next_Clicked())" type="button" class="btn btn-sm btn-primary p-2 p-sm-5 lead" style="font-size: 2.4rem;" disabled="@(GameStatus != BlackjackGameStatus.ClientGameplay ? true : false)">
                Continue
            </button>

            <button @onclick="@(async () => await Stop_Clicked())" type="button" class="btn btn-sm btn-primary p-2 p-sm-5 lead" style="font-size: 2.4rem;" disabled="@(GameStatus != BlackjackGameStatus.ClientGameplay ? true : false)">
                Stop
            </button>

        </div>

    </div>
}


@code {

}
